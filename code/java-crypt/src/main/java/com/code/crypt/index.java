/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.code.crypt;

import java.awt.Color;
import java.util.Base64;
import java.util.logging.*;
import java.math.BigInteger; 
import java.security.*;
import com.google.common.io.BaseEncoding;
import com.google.common.base.Charsets;
import javax.swing.JOptionPane;

/**
 *
 * @author Mekel
 */
public class index extends javax.swing.JFrame {

    /**
     * Creates new form index
     */
    int mouseX;
    int mouseY;
    public index() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        main = new javax.swing.JPanel();
        sidebar = new javax.swing.JPanel();
        caesar = new javax.swing.JPanel();
        caesarLabel = new javax.swing.JLabel();
        hashing = new javax.swing.JPanel();
        hashLabel = new javax.swing.JLabel();
        encoding = new javax.swing.JPanel();
        encodingLabel = new javax.swing.JLabel();
        rsa = new javax.swing.JPanel();
        rsaLabel = new javax.swing.JLabel();
        about = new javax.swing.JPanel();
        aboutSideLabel = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        caesarPanel = new javax.swing.JPanel();
        shift = new javax.swing.JSpinner();
        shiftLabel = new javax.swing.JLabel();
        caesarInput = new javax.swing.JScrollPane();
        caesarInputArea = new javax.swing.JTextArea();
        caesarInputLabel = new javax.swing.JLabel();
        caesarOutput = new javax.swing.JScrollPane();
        caesarOutputArea = new javax.swing.JTextArea();
        caesarOutputLabel = new javax.swing.JLabel();
        encryptButton = new javax.swing.JButton();
        caesarNav = new javax.swing.JPanel();
        caesarNavTitle = new javax.swing.JLabel();
        caesarTitle = new javax.swing.JLabel();
        hashingPanel = new javax.swing.JPanel();
        selectHashLabel = new javax.swing.JLabel();
        hashInput = new javax.swing.JScrollPane();
        hashInputArea = new javax.swing.JTextArea();
        hashInputLabel = new javax.swing.JLabel();
        hashOutput = new javax.swing.JScrollPane();
        hashOutputArea = new javax.swing.JTextArea();
        hashOutputLabel = new javax.swing.JLabel();
        hashNav = new javax.swing.JPanel();
        hashNavTitle = new javax.swing.JLabel();
        hashComboBox = new javax.swing.JComboBox<>();
        hashButton = new javax.swing.JButton();
        hashTitle = new javax.swing.JLabel();
        encodingPanel = new javax.swing.JPanel();
        selectEncodingLabel = new javax.swing.JLabel();
        encodingInput = new javax.swing.JScrollPane();
        encodingInputArea = new javax.swing.JTextArea();
        encodingInputLabel = new javax.swing.JLabel();
        encodingOutput = new javax.swing.JScrollPane();
        encodingOutputArea = new javax.swing.JTextArea();
        encodingOutputLabel = new javax.swing.JLabel();
        encodingNav = new javax.swing.JPanel();
        encodingNavTitle = new javax.swing.JLabel();
        encodingComboBox = new javax.swing.JComboBox<>();
        encodeButton = new javax.swing.JButton();
        encodeTitle = new javax.swing.JLabel();
        rsaPanel = new javax.swing.JPanel();
        rsaNav = new javax.swing.JPanel();
        encodingNavTitle1 = new javax.swing.JLabel();
        generateRsa = new javax.swing.JButton();
        privateKey = new javax.swing.JScrollPane();
        privateKeyArea = new javax.swing.JTextArea();
        rsaTitle = new javax.swing.JLabel();
        privateKeyLabel = new javax.swing.JLabel();
        publicKey = new javax.swing.JScrollPane();
        publicKeyArea = new javax.swing.JTextArea();
        publicKeyLabel = new javax.swing.JLabel();
        rsaBitSize = new javax.swing.JComboBox<>();
        rsaBitSizeLabel = new javax.swing.JLabel();
        genTime = new javax.swing.JLabel();
        aboutPanel = new javax.swing.JPanel();
        aboutNav = new javax.swing.JPanel();
        aboutNavTitle = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        topNav = new javax.swing.JPanel();
        exitButton = new javax.swing.JPanel();
        maximizeButton = new javax.swing.JPanel();
        minimizeButton = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setUndecorated(true);
        setResizable(false);

        main.setBackground(new java.awt.Color(30, 35, 40));
        main.setPreferredSize(new java.awt.Dimension(720, 480));
        main.setLayout(new java.awt.BorderLayout());

        sidebar.setBackground(new java.awt.Color(24, 58, 86));

        caesar.setBackground(new java.awt.Color(21, 199, 203));
        caesar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        caesar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                index.this.mouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                index.this.mouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                index.this.mouseExited(evt);
            }
        });

        caesarLabel.setFont(new java.awt.Font("Source Code Pro Medium", 0, 14)); // NOI18N
        caesarLabel.setForeground(new java.awt.Color(255, 255, 255));
        caesarLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        caesarLabel.setText("Caesar");
        caesarLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout caesarLayout = new javax.swing.GroupLayout(caesar);
        caesar.setLayout(caesarLayout);
        caesarLayout.setHorizontalGroup(
            caesarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(caesarLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        caesarLayout.setVerticalGroup(
            caesarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, caesarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(caesarLabel)
                .addContainerGap())
        );

        hashing.setBackground(new java.awt.Color(21, 199, 203));
        hashing.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        hashing.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                index.this.mouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                index.this.mouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                index.this.mouseExited(evt);
            }
        });

        hashLabel.setFont(new java.awt.Font("Source Code Pro Medium", 0, 14)); // NOI18N
        hashLabel.setForeground(new java.awt.Color(255, 255, 255));
        hashLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hashLabel.setText("Hashing");
        hashLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout hashingLayout = new javax.swing.GroupLayout(hashing);
        hashing.setLayout(hashingLayout);
        hashingLayout.setHorizontalGroup(
            hashingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(hashLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        hashingLayout.setVerticalGroup(
            hashingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hashingLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(hashLabel)
                .addContainerGap())
        );

        encoding.setBackground(new java.awt.Color(21, 199, 203));
        encoding.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        encoding.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                index.this.mouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                index.this.mouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                index.this.mouseExited(evt);
            }
        });

        encodingLabel.setFont(new java.awt.Font("Source Code Pro Medium", 0, 14)); // NOI18N
        encodingLabel.setForeground(new java.awt.Color(255, 255, 255));
        encodingLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        encodingLabel.setText("Encoding");

        javax.swing.GroupLayout encodingLayout = new javax.swing.GroupLayout(encoding);
        encoding.setLayout(encodingLayout);
        encodingLayout.setHorizontalGroup(
            encodingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(encodingLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        encodingLayout.setVerticalGroup(
            encodingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(encodingLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(encodingLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        rsa.setBackground(new java.awt.Color(21, 199, 203));
        rsa.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rsa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                index.this.mouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                index.this.mouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                index.this.mouseExited(evt);
            }
        });

        rsaLabel.setFont(new java.awt.Font("Source Code Pro Medium", 0, 14)); // NOI18N
        rsaLabel.setForeground(new java.awt.Color(255, 255, 255));
        rsaLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rsaLabel.setText("RSA");

        javax.swing.GroupLayout rsaLayout = new javax.swing.GroupLayout(rsa);
        rsa.setLayout(rsaLayout);
        rsaLayout.setHorizontalGroup(
            rsaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rsaLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        rsaLayout.setVerticalGroup(
            rsaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rsaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rsaLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        about.setBackground(new java.awt.Color(21, 199, 203));
        about.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        about.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                index.this.mouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                index.this.mouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                index.this.mouseExited(evt);
            }
        });

        aboutSideLabel.setFont(new java.awt.Font("Source Code Pro Medium", 0, 14)); // NOI18N
        aboutSideLabel.setForeground(new java.awt.Color(255, 255, 255));
        aboutSideLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        aboutSideLabel.setText("About");

        javax.swing.GroupLayout aboutLayout = new javax.swing.GroupLayout(about);
        about.setLayout(aboutLayout);
        aboutLayout.setHorizontalGroup(
            aboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(aboutSideLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        aboutLayout.setVerticalGroup(
            aboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aboutSideLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        title.setFont(new java.awt.Font("Source Code Pro Medium", 1, 18)); // NOI18N
        title.setForeground(new java.awt.Color(255, 255, 255));
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Crypt it!");

        javax.swing.GroupLayout sidebarLayout = new javax.swing.GroupLayout(sidebar);
        sidebar.setLayout(sidebarLayout);
        sidebarLayout.setHorizontalGroup(
            sidebarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(about, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(caesar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(hashing, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(encoding, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(sidebarLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(title)
                .addContainerGap(23, Short.MAX_VALUE))
            .addComponent(rsa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        sidebarLayout.setVerticalGroup(
            sidebarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidebarLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(title)
                .addGap(69, 69, 69)
                .addComponent(caesar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(hashing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(encoding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rsa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 325, Short.MAX_VALUE)
                .addComponent(about, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        main.add(sidebar, java.awt.BorderLayout.LINE_START);

        mainPanel.setLayout(new java.awt.CardLayout());

        caesarPanel.setBackground(new java.awt.Color(225, 227, 226));

        shift.setModel(new javax.swing.SpinnerNumberModel(0, 0, 26, 1));

        shiftLabel.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        shiftLabel.setText("Shift");

        caesarInputArea.setColumns(20);
        caesarInputArea.setRows(5);
        caesarInput.setViewportView(caesarInputArea);

        caesarInputLabel.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        caesarInputLabel.setText("Input");

        caesarOutputArea.setColumns(20);
        caesarOutputArea.setRows(5);
        caesarOutput.setViewportView(caesarOutputArea);

        caesarOutputLabel.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        caesarOutputLabel.setText("Output");

        encryptButton.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        encryptButton.setText("Encrypt");
        encryptButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        encryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptButtonActionPerformed(evt);
            }
        });

        caesarNav.setBackground(new java.awt.Color(21, 199, 203));

        caesarNavTitle.setFont(new java.awt.Font("Source Code Pro Medium", 1, 14)); // NOI18N
        caesarNavTitle.setForeground(new java.awt.Color(255, 255, 255));
        caesarNavTitle.setText("Caesar");

        javax.swing.GroupLayout caesarNavLayout = new javax.swing.GroupLayout(caesarNav);
        caesarNav.setLayout(caesarNavLayout);
        caesarNavLayout.setHorizontalGroup(
            caesarNavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(caesarNavLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(caesarNavTitle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        caesarNavLayout.setVerticalGroup(
            caesarNavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(caesarNavLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(caesarNavTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(7, 7, 7))
        );

        caesarTitle.setFont(new java.awt.Font("Roboto Medium", 0, 20)); // NOI18N
        caesarTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        caesarTitle.setText("Caesar Cipher");

        javax.swing.GroupLayout caesarPanelLayout = new javax.swing.GroupLayout(caesarPanel);
        caesarPanel.setLayout(caesarPanelLayout);
        caesarPanelLayout.setHorizontalGroup(
            caesarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(caesarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(caesarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(caesarInput, javax.swing.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE)
                    .addComponent(caesarOutput)
                    .addGroup(caesarPanelLayout.createSequentialGroup()
                        .addGroup(caesarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(shiftLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(shift, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(caesarInputLabel)
                            .addComponent(caesarOutputLabel)
                            .addComponent(encryptButton))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(caesarTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(caesarNav, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        caesarPanelLayout.setVerticalGroup(
            caesarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(caesarPanelLayout.createSequentialGroup()
                .addComponent(caesarNav, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(caesarTitle)
                .addGap(28, 28, 28)
                .addComponent(shiftLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(shift, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(caesarInputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(caesarInput, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(encryptButton)
                .addGap(74, 74, 74)
                .addComponent(caesarOutputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(caesarOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(129, Short.MAX_VALUE))
        );

        mainPanel.add(caesarPanel, "card2");

        hashingPanel.setBackground(new java.awt.Color(225, 227, 226));

        selectHashLabel.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        selectHashLabel.setText("Select hash");

        hashInputArea.setColumns(20);
        hashInputArea.setRows(5);
        hashInput.setViewportView(hashInputArea);

        hashInputLabel.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        hashInputLabel.setText("Input");

        hashOutputArea.setColumns(20);
        hashOutputArea.setRows(5);
        hashOutputArea.setAutoscrolls(false);
        hashOutput.setViewportView(hashOutputArea);
        hashOutputArea.setWrapStyleWord(true);
        hashOutputArea.setLineWrap(true);

        hashOutputLabel.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        hashOutputLabel.setText("Hash value");

        hashNav.setBackground(new java.awt.Color(21, 199, 203));

        hashNavTitle.setFont(new java.awt.Font("Source Code Pro Medium", 1, 14)); // NOI18N
        hashNavTitle.setForeground(new java.awt.Color(255, 255, 255));
        hashNavTitle.setText("Hash");

        javax.swing.GroupLayout hashNavLayout = new javax.swing.GroupLayout(hashNav);
        hashNav.setLayout(hashNavLayout);
        hashNavLayout.setHorizontalGroup(
            hashNavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hashNavLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hashNavTitle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        hashNavLayout.setVerticalGroup(
            hashNavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hashNavLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hashNavTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(7, 7, 7))
        );

        hashComboBox.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        hashComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MD-5", "SHA-1", "SHA-224", "SHA-256", "SHA-384", "SHA-512" }));
        hashComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hashComboBoxActionPerformed(evt);
            }
        });

        hashButton.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        hashButton.setText("Hash");
        hashButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        hashButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hashButtonActionPerformed(evt);
            }
        });

        hashTitle.setFont(new java.awt.Font("Roboto Medium", 0, 20)); // NOI18N
        hashTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hashTitle.setText("Hash Function");

        javax.swing.GroupLayout hashingPanelLayout = new javax.swing.GroupLayout(hashingPanel);
        hashingPanel.setLayout(hashingPanelLayout);
        hashingPanelLayout.setHorizontalGroup(
            hashingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(hashNav, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(hashingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(hashingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hashInput, javax.swing.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE)
                    .addComponent(hashOutput)
                    .addGroup(hashingPanelLayout.createSequentialGroup()
                        .addGroup(hashingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hashComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hashOutputLabel)
                            .addComponent(selectHashLabel)
                            .addComponent(hashInputLabel)
                            .addComponent(hashButton))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(hashTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        hashingPanelLayout.setVerticalGroup(
            hashingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hashingPanelLayout.createSequentialGroup()
                .addComponent(hashNav, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(hashTitle)
                .addGap(28, 28, 28)
                .addComponent(selectHashLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(hashComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(hashInputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hashInput, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(hashButton)
                .addGap(70, 70, 70)
                .addComponent(hashOutputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hashOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(138, Short.MAX_VALUE))
        );

        mainPanel.add(hashingPanel, "card3");

        encodingPanel.setBackground(new java.awt.Color(225, 227, 226));
        encodingPanel.setPreferredSize(new java.awt.Dimension(720, 480));

        selectEncodingLabel.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        selectEncodingLabel.setText("Select encoding");

        encodingInputArea.setColumns(20);
        encodingInputArea.setRows(5);
        encodingInput.setViewportView(encodingInputArea);

        encodingInputLabel.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        encodingInputLabel.setText("Input");

        encodingOutputArea.setColumns(20);
        encodingOutputArea.setRows(5);
        encodingOutput.setViewportView(encodingOutputArea);

        encodingOutputLabel.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        encodingOutputLabel.setText("Output");

        encodingNav.setBackground(new java.awt.Color(21, 199, 203));

        encodingNavTitle.setFont(new java.awt.Font("Source Code Pro Medium", 1, 14)); // NOI18N
        encodingNavTitle.setForeground(new java.awt.Color(255, 255, 255));
        encodingNavTitle.setText("Encode");

        javax.swing.GroupLayout encodingNavLayout = new javax.swing.GroupLayout(encodingNav);
        encodingNav.setLayout(encodingNavLayout);
        encodingNavLayout.setHorizontalGroup(
            encodingNavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(encodingNavLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(encodingNavTitle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        encodingNavLayout.setVerticalGroup(
            encodingNavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, encodingNavLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(encodingNavTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        encodingComboBox.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        encodingComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Base64", "Base32", "ASCII", "Hex", "Octal", "Binary", "ROT-13", "Reverse" }));
        encodingComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encodingComboBoxActionPerformed(evt);
            }
        });

        encodeButton.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        encodeButton.setText("Encode");
        encodeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        encodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encodeButtonActionPerformed(evt);
            }
        });

        encodeTitle.setFont(new java.awt.Font("Roboto Medium", 0, 20)); // NOI18N
        encodeTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        encodeTitle.setText("Encode");

        javax.swing.GroupLayout encodingPanelLayout = new javax.swing.GroupLayout(encodingPanel);
        encodingPanel.setLayout(encodingPanelLayout);
        encodingPanelLayout.setHorizontalGroup(
            encodingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(encodingNav, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(encodingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(encodingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(encodingInput, javax.swing.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE)
                    .addComponent(encodingOutput)
                    .addGroup(encodingPanelLayout.createSequentialGroup()
                        .addGroup(encodingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(encodingOutputLabel)
                            .addComponent(selectEncodingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(encodingInputLabel)
                            .addComponent(encodeButton)
                            .addComponent(encodingComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(encodeTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        encodingPanelLayout.setVerticalGroup(
            encodingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(encodingPanelLayout.createSequentialGroup()
                .addComponent(encodingNav, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(encodeTitle)
                .addGap(28, 28, 28)
                .addComponent(selectEncodingLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(encodingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(encodingInputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(encodingInput, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(encodeButton)
                .addGap(70, 70, 70)
                .addComponent(encodingOutputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(encodingOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(138, Short.MAX_VALUE))
        );

        mainPanel.add(encodingPanel, "card4");

        rsaPanel.setBackground(new java.awt.Color(225, 227, 226));

        rsaNav.setBackground(new java.awt.Color(21, 199, 203));

        encodingNavTitle1.setFont(new java.awt.Font("Source Code Pro Medium", 1, 14)); // NOI18N
        encodingNavTitle1.setForeground(new java.awt.Color(255, 255, 255));
        encodingNavTitle1.setText("Encode");

        javax.swing.GroupLayout rsaNavLayout = new javax.swing.GroupLayout(rsaNav);
        rsaNav.setLayout(rsaNavLayout);
        rsaNavLayout.setHorizontalGroup(
            rsaNavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rsaNavLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(encodingNavTitle1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        rsaNavLayout.setVerticalGroup(
            rsaNavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rsaNavLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(encodingNavTitle1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        generateRsa.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        generateRsa.setText("Generate RSA key");
        generateRsa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateRsaActionPerformed(evt);
            }
        });

        privateKeyArea.setColumns(20);
        privateKeyArea.setRows(5);
        privateKeyArea.setAutoscrolls(false);
        privateKey.setViewportView(privateKeyArea);

        rsaTitle.setFont(new java.awt.Font("Roboto Medium", 0, 20)); // NOI18N
        rsaTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rsaTitle.setText("RSA Key Pair (PEM format)");

        privateKeyLabel.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        privateKeyLabel.setText("Private Key");

        publicKeyArea.setColumns(20);
        publicKeyArea.setRows(5);
        publicKey.setViewportView(publicKeyArea);

        publicKeyLabel.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        publicKeyLabel.setText("Public Key");

        rsaBitSize.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        rsaBitSize.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1024-bit", "2048-bit", "4096-bit" }));

        rsaBitSizeLabel.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        rsaBitSizeLabel.setText("Bit size :");

        genTime.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N

        javax.swing.GroupLayout rsaPanelLayout = new javax.swing.GroupLayout(rsaPanel);
        rsaPanel.setLayout(rsaPanelLayout);
        rsaPanelLayout.setHorizontalGroup(
            rsaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rsaNav, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(rsaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rsaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rsaTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(publicKey, javax.swing.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE)
                    .addComponent(privateKey)
                    .addGroup(rsaPanelLayout.createSequentialGroup()
                        .addGroup(rsaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(publicKeyLabel)
                            .addComponent(privateKeyLabel)
                            .addComponent(rsaBitSizeLabel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(rsaPanelLayout.createSequentialGroup()
                        .addComponent(rsaBitSize, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(generateRsa)
                        .addGap(18, 18, 18)
                        .addComponent(genTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        rsaPanelLayout.setVerticalGroup(
            rsaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rsaPanelLayout.createSequentialGroup()
                .addComponent(rsaNav, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rsaTitle)
                .addGap(29, 29, 29)
                .addComponent(rsaBitSizeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rsaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateRsa)
                    .addComponent(rsaBitSize, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genTime, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(privateKeyLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(privateKey, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(publicKeyLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(publicKey, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        mainPanel.add(rsaPanel, "card5");

        aboutPanel.setBackground(new java.awt.Color(225, 227, 226));

        aboutNav.setBackground(new java.awt.Color(21, 199, 203));

        aboutNavTitle.setFont(new java.awt.Font("Source Code Pro Medium", 1, 14)); // NOI18N
        aboutNavTitle.setForeground(new java.awt.Color(255, 255, 255));
        aboutNavTitle.setText("About");

        javax.swing.GroupLayout aboutNavLayout = new javax.swing.GroupLayout(aboutNav);
        aboutNav.setLayout(aboutNavLayout);
        aboutNavLayout.setHorizontalGroup(
            aboutNavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutNavLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aboutNavTitle)
                .addContainerGap(741, Short.MAX_VALUE))
        );
        aboutNavLayout.setVerticalGroup(
            aboutNavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, aboutNavLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(aboutNavTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Roboto Medium", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Pemrograman Berorientasi Objek - Kelas B");

        jLabel2.setFont(new java.awt.Font("Roboto Medium", 0, 20)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Erandri Mekel Ilyasa - 21120119130108");

        jLabel3.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("GitHub link : github.com/retr00exe/java-crypt");

        jLabel4.setFont(new java.awt.Font("Roboto Medium", 0, 20)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Syekh Seif' Izzul Khaq - 21120119130080 ");

        javax.swing.GroupLayout aboutPanelLayout = new javax.swing.GroupLayout(aboutPanel);
        aboutPanel.setLayout(aboutPanelLayout);
        aboutPanelLayout.setHorizontalGroup(
            aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(aboutNav, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        aboutPanelLayout.setVerticalGroup(
            aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addComponent(aboutNav, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addGap(37, 37, 37)
                .addComponent(jLabel3)
                .addContainerGap(493, Short.MAX_VALUE))
        );

        mainPanel.add(aboutPanel, "card5");

        main.add(mainPanel, java.awt.BorderLayout.CENTER);

        topNav.setBackground(new java.awt.Color(22, 148, 161));
        topNav.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                topNavMouseDragged(evt);
            }
        });
        topNav.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                topNavMousePressed(evt);
            }
        });

        exitButton.setBackground(new java.awt.Color(255, 96, 92));
        exitButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitButton.setPreferredSize(new java.awt.Dimension(15, 15));
        exitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                index.this.mouseClicked(evt);
            }
        });

        javax.swing.GroupLayout exitButtonLayout = new javax.swing.GroupLayout(exitButton);
        exitButton.setLayout(exitButtonLayout);
        exitButtonLayout.setHorizontalGroup(
            exitButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        exitButtonLayout.setVerticalGroup(
            exitButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );

        maximizeButton.setBackground(new java.awt.Color(255, 189, 68));
        maximizeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        maximizeButton.setPreferredSize(new java.awt.Dimension(15, 15));
        maximizeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                index.this.mouseClicked(evt);
            }
        });

        javax.swing.GroupLayout maximizeButtonLayout = new javax.swing.GroupLayout(maximizeButton);
        maximizeButton.setLayout(maximizeButtonLayout);
        maximizeButtonLayout.setHorizontalGroup(
            maximizeButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        maximizeButtonLayout.setVerticalGroup(
            maximizeButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );

        minimizeButton.setBackground(new java.awt.Color(0, 202, 72));
        minimizeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        minimizeButton.setPreferredSize(new java.awt.Dimension(15, 15));
        minimizeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                index.this.mouseClicked(evt);
            }
        });

        javax.swing.GroupLayout minimizeButtonLayout = new javax.swing.GroupLayout(minimizeButton);
        minimizeButton.setLayout(minimizeButtonLayout);
        minimizeButtonLayout.setHorizontalGroup(
            minimizeButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        minimizeButtonLayout.setVerticalGroup(
            minimizeButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout topNavLayout = new javax.swing.GroupLayout(topNav);
        topNav.setLayout(topNavLayout);
        topNavLayout.setHorizontalGroup(
            topNavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topNavLayout.createSequentialGroup()
                .addContainerGap(876, Short.MAX_VALUE)
                .addComponent(minimizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maximizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        topNavLayout.setVerticalGroup(
            topNavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topNavLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(topNavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(minimizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maximizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        main.add(topNav, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(main, javax.swing.GroupLayout.DEFAULT_SIZE, 943, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(main, javax.swing.GroupLayout.DEFAULT_SIZE, 747, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(943, 747));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void mouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseClicked
        if(evt.getSource()==caesar){
            caesarPanel.setVisible(true);
            hashingPanel.setVisible(false);
            encodingPanel.setVisible(false);
            rsaPanel.setVisible(false);
            aboutPanel.setVisible(false);
        }
        if(evt.getSource()==hashing){
            caesarPanel.setVisible(false);
            hashingPanel.setVisible(true);
            encodingPanel.setVisible(false);
            rsaPanel.setVisible(false);
            aboutPanel.setVisible(false);
        }
        if(evt.getSource()==encoding){
            caesarPanel.setVisible(false);
            hashingPanel.setVisible(false);
            encodingPanel.setVisible(true);
            rsaPanel.setVisible(false);
            aboutPanel.setVisible(false);
        }
        if(evt.getSource()==rsa){
            caesarPanel.setVisible(false);
            hashingPanel.setVisible(false);
            encodingPanel.setVisible(false);
            rsaPanel.setVisible(true);
            aboutPanel.setVisible(false);
        }
        if(evt.getSource()==about){
            caesarPanel.setVisible(false);
            hashingPanel.setVisible(false);
            encodingPanel.setVisible(false);
            rsaPanel.setVisible(false);
            aboutPanel.setVisible(true);
        }
        if(evt.getSource()==minimizeButton){
            this.setExtendedState(index.ICONIFIED);
        }
        if(evt.getSource()==maximizeButton){
            if(this.getExtendedState() != index.MAXIMIZED_BOTH){
                this.setExtendedState(index.MAXIMIZED_BOTH);
            }else{
                this.setExtendedState(index.NORMAL);
            }
        }
        if(evt.getSource()==exitButton){
            int confirmed = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit the program?", "Exit Box", JOptionPane.YES_NO_OPTION);
            if (confirmed == JOptionPane.YES_OPTION) {
                dispose();
            }
        }
    }//GEN-LAST:event_mouseClicked

    private void mouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseEntered
        if(evt.getSource()==caesar){
            caesar.setBackground(new Color(22, 148, 161));
        }
        if(evt.getSource()==hashing){
            hashing.setBackground(new Color(22, 148, 161));
        }
        if(evt.getSource()==encoding){
            encoding.setBackground(new Color(22, 148, 161));
        }
        if(evt.getSource()==rsa){
            rsa.setBackground(new Color(22, 148, 161));
        }
        if(evt.getSource()==about){
            about.setBackground(new Color(22, 148, 161));
        }
    }//GEN-LAST:event_mouseEntered

    private void mouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseExited
        if(evt.getSource()==caesar){
            caesar.setBackground(new Color(21, 199, 203));
        }
        if(evt.getSource()==hashing){
            hashing.setBackground(new Color(21, 199, 203));
        }
        if(evt.getSource()==encoding){
            encoding.setBackground(new Color(21, 199, 203));
        }
        if(evt.getSource()==rsa){
            rsa.setBackground(new Color(21, 199, 203));
        }
        if(evt.getSource()==about){
            about.setBackground(new Color(21, 199, 203));
        }
    }//GEN-LAST:event_mouseExited

    private void hashComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hashComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hashComboBoxActionPerformed

    private void hashButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hashButtonActionPerformed
        int hashComboBoxIndex = hashComboBox.getSelectedIndex();
        String hashPlainText = hashInputArea.getText();
        String hashAlgorithm = null;
        switch(hashComboBoxIndex){
            case 0:
                hashAlgorithm = "MD5";
                break;
            case 1:
                hashAlgorithm = "SHA-1";
                break;
            case 2:
                hashAlgorithm = "SHA-224";
                break;
            case 3:
                hashAlgorithm = "SHA-256";
                break;
            case 4:
                hashAlgorithm = "SHA-384";
                break;
            case 5:
                hashAlgorithm = "SHA-512";
                break;
        }    
        try{ 
            MessageDigest md = MessageDigest.getInstance(hashAlgorithm);
            byte[] messageDigest = md.digest(hashPlainText.getBytes());
            BigInteger no = new BigInteger(1, messageDigest);
            String hashtext = no.toString(16);
            while (hashtext.length() < 32) {
                hashtext = "0" + hashtext;
            }
            hashOutputArea.setText(hashtext);
        }
        catch (NoSuchAlgorithmException e) { 
            throw new RuntimeException(e); 
        }
    }//GEN-LAST:event_hashButtonActionPerformed

    private void encryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptButtonActionPerformed
        String text = caesarInputArea.getText();
        int s = (Integer) shift.getValue();
        StringBuffer result= new StringBuffer(); 
        for(int i=0; i < text.length(); i++){
            if((int)text.charAt(i) < 65 || (int)text.charAt(i) > 122){
                result.append(text.charAt(i));
                continue;
            }
            if((int)text.charAt(i) < 97 && (int)text.charAt(i) > 90){
                result.append(text.charAt(i));
                continue;
            }
            if(Character.isUpperCase(text.charAt(i))){ 
                char ch = (char)(((int)text.charAt(i) + s - 65) % 26 + 65); 
                result.append(ch); 
            } 
            else{ 
                char ch = (char)(((int)text.charAt(i) + s - 97) % 26 + 97); 
                result.append(ch); 
            }
        }
        caesarOutputArea.setText(new String(result)); 
    }//GEN-LAST:event_encryptButtonActionPerformed

    private void encodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encodeButtonActionPerformed
        int encodingComboBoxValue = encodingComboBox.getSelectedIndex();
        String encodingPlainText = encodingInputArea.getText();
        switch(encodingComboBoxValue){
            case 0:
                byte[] base64Bytes = Base64.getEncoder().encode(encodingPlainText.getBytes());
                encodingOutputArea.setText(new String(base64Bytes));
                break;
            case 1:
                String base32Bytes = BaseEncoding.base32().encode(encodingPlainText.getBytes(Charsets.US_ASCII));
                encodingOutputArea.setText(base32Bytes);
                break;
            case 2:
                char[] ascii = encodingPlainText.toCharArray();
                StringBuffer asciiValue = new StringBuffer();
                for(int ch:ascii){
                    ch = (int)ch;
                    asciiValue.append(ch).append(" ");
                }
                encodingOutputArea.setText(new String(asciiValue));
                break;
            case 3:
                String base16Bytes = BaseEncoding.base16().encode(encodingPlainText.getBytes(Charsets.US_ASCII)).toLowerCase();
                encodingOutputArea.setText(base16Bytes.replaceAll("..", "$0 ")); // Regex buat split tiap 2 karakter
                break;
            case 4:
                char[] octal = encodingPlainText.toCharArray();
                StringBuffer octalValue = new StringBuffer();
                for(int ch:octal){
                    ch = (int)ch;
                    octalValue.append(Integer.toOctalString(ch)).append(" ");
                }
                encodingOutputArea.setText(new String(octalValue));
                break;
            case 5:
                char[] binary = encodingPlainText.toCharArray();
                StringBuffer binaryValue = new StringBuffer();
                for(int ch:binary){
                    ch = (int)ch;
                    binaryValue.append(Integer.toBinaryString(ch)).append(" ");
                }
                encodingOutputArea.setText(new String(binaryValue));
                break;
            case 6:
                String text = encodingPlainText;
                int s = 13;
                StringBuffer result= new StringBuffer();
                for(int i=0; i < text.length(); i++){
                    if((int)text.charAt(i) < 65 || (int)text.charAt(i) > 122){
                        result.append(text.charAt(i));
                        continue;
                    }
                    if((int)text.charAt(i) < 97 && (int)text.charAt(i) > 90){
                        result.append(text.charAt(i));
                        continue;
                    }
                    if(Character.isUpperCase(text.charAt(i))){ 
                        char ch = (char)(((int)text.charAt(i) + s - 65) % 26 + 65); 
                        result.append(ch); 
                    } 
                    else{ 
                        char ch = (char)(((int)text.charAt(i) + s - 97) % 26 + 97); 
                        result.append(ch); 
                    }
                }
                encodingOutputArea.setText(new String(result));
                break;
            case 7:
                String input = encodingPlainText;
                byte[] strAsByteArray = input.getBytes();
                byte[] reverse = new byte[strAsByteArray.length];
                for (int i = 0; i < strAsByteArray.length; i++){
                    reverse[i] = strAsByteArray[strAsByteArray.length - i - 1];
                }
                encodingOutputArea.setText(new String(reverse));
        }
    }//GEN-LAST:event_encodeButtonActionPerformed

    private void encodingComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encodingComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_encodingComboBoxActionPerformed

    private void generateRsaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateRsaActionPerformed
        try {
            int bitSizeComboBoxIndex = rsaBitSize.getSelectedIndex();
            KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA");
            String privateKey, publicKey, privateHead, privateBody, privateFoot, publicHead, publicBody, publicFoot;
            KeyPair kp;
            int bitSize = 0;
            switch(bitSizeComboBoxIndex){
                case 0:
                    bitSize = 1024;
                    break;
                case 1:
                    bitSize = 2048;
                    break;
                case 2:
                    bitSize = 4096;
                    break;
            }
            kpg.initialize(bitSize); 
            long startTime = System.currentTimeMillis();
            kp = kpg.generateKeyPair();
            long endTime = System.currentTimeMillis();
            float duration = (endTime - startTime)/1000F;
            genTime.setText("Key generated in " + Float.toString(duration) + " second");
            
            privateHead = "-----BEGIN RSA PRIVATE KEY-----";
            privateBody = Base64.getMimeEncoder().encodeToString(kp.getPrivate().getEncoded());
            privateFoot = "-----END RSA PRIVATE KEY-----";
            privateKey = privateHead + "\n" + privateBody + "\n" + privateFoot;
            privateKeyArea.setText(privateKey);
            
            publicHead = "-----BEGIN RSA PUBLIC KEY-----";
            publicBody = Base64.getMimeEncoder().encodeToString(kp.getPublic().getEncoded());
            publicFoot = "-----END RSA PUBLIC KEY-----";
            publicKey = publicHead + "\n" + publicBody + "\n" + publicFoot;
            publicKeyArea.setText(publicKey);

        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(index.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_generateRsaActionPerformed

    private void topNavMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_topNavMouseDragged
        int kordinatX = evt.getXOnScreen();
        int kordinatY = evt.getYOnScreen();
        this.setLocation(kordinatX - mouseX, kordinatY - mouseY);
    }//GEN-LAST:event_topNavMouseDragged

    private void topNavMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_topNavMousePressed
        mouseX = evt.getX();
        mouseY = evt.getY();
    }//GEN-LAST:event_topNavMousePressed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new index().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel about;
    private javax.swing.JPanel aboutNav;
    private javax.swing.JLabel aboutNavTitle;
    private javax.swing.JPanel aboutPanel;
    private javax.swing.JLabel aboutSideLabel;
    private javax.swing.JPanel caesar;
    private javax.swing.JScrollPane caesarInput;
    private javax.swing.JTextArea caesarInputArea;
    private javax.swing.JLabel caesarInputLabel;
    private javax.swing.JLabel caesarLabel;
    private javax.swing.JPanel caesarNav;
    private javax.swing.JLabel caesarNavTitle;
    private javax.swing.JScrollPane caesarOutput;
    private javax.swing.JTextArea caesarOutputArea;
    private javax.swing.JLabel caesarOutputLabel;
    private javax.swing.JPanel caesarPanel;
    private javax.swing.JLabel caesarTitle;
    private javax.swing.JButton encodeButton;
    private javax.swing.JLabel encodeTitle;
    private javax.swing.JPanel encoding;
    private javax.swing.JComboBox<String> encodingComboBox;
    private javax.swing.JScrollPane encodingInput;
    private javax.swing.JTextArea encodingInputArea;
    private javax.swing.JLabel encodingInputLabel;
    private javax.swing.JLabel encodingLabel;
    private javax.swing.JPanel encodingNav;
    private javax.swing.JLabel encodingNavTitle;
    private javax.swing.JLabel encodingNavTitle1;
    private javax.swing.JScrollPane encodingOutput;
    private javax.swing.JTextArea encodingOutputArea;
    private javax.swing.JLabel encodingOutputLabel;
    private javax.swing.JPanel encodingPanel;
    private javax.swing.JButton encryptButton;
    private javax.swing.JPanel exitButton;
    private javax.swing.JLabel genTime;
    private javax.swing.JButton generateRsa;
    private javax.swing.JButton hashButton;
    private javax.swing.JComboBox<String> hashComboBox;
    private javax.swing.JScrollPane hashInput;
    private javax.swing.JTextArea hashInputArea;
    private javax.swing.JLabel hashInputLabel;
    private javax.swing.JLabel hashLabel;
    private javax.swing.JPanel hashNav;
    private javax.swing.JLabel hashNavTitle;
    private javax.swing.JScrollPane hashOutput;
    private javax.swing.JTextArea hashOutputArea;
    private javax.swing.JLabel hashOutputLabel;
    private javax.swing.JLabel hashTitle;
    private javax.swing.JPanel hashing;
    private javax.swing.JPanel hashingPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel main;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel maximizeButton;
    private javax.swing.JPanel minimizeButton;
    private javax.swing.JScrollPane privateKey;
    private javax.swing.JTextArea privateKeyArea;
    private javax.swing.JLabel privateKeyLabel;
    private javax.swing.JScrollPane publicKey;
    private javax.swing.JTextArea publicKeyArea;
    private javax.swing.JLabel publicKeyLabel;
    private javax.swing.JPanel rsa;
    private javax.swing.JComboBox<String> rsaBitSize;
    private javax.swing.JLabel rsaBitSizeLabel;
    private javax.swing.JLabel rsaLabel;
    private javax.swing.JPanel rsaNav;
    private javax.swing.JPanel rsaPanel;
    private javax.swing.JLabel rsaTitle;
    private javax.swing.JLabel selectEncodingLabel;
    private javax.swing.JLabel selectHashLabel;
    private javax.swing.JSpinner shift;
    private javax.swing.JLabel shiftLabel;
    private javax.swing.JPanel sidebar;
    private javax.swing.JLabel title;
    private javax.swing.JPanel topNav;
    // End of variables declaration//GEN-END:variables
}
